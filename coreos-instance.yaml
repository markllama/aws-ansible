---
#
# An instance of an OS is only useful if you can log in and work.
# The first two things you need are an SSH public key and a Security Group
# that allows SSH access to the subnet where the instance resides
#
- name: 
  hosts:
    - localhost

  gather_facts: no
  connection: local

  tasks:
    - name: Create an SSH KeyPair - ansible_user
      amazon.aws.ec2_key:
        name: ansible_user
        key_material: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIH6uOfZiryoRHXpQWZQPj8oC3nD2+FPjZp6hgcbJi5GZ AWS Ansible/Admin Key"
        tags:
          Name: infra_admin_user

    - name: Create Security Group - Allow SSH inbound
      block:
        - name: Get VPC ID for Security Group
          amazon.aws.ec2_vpc_net_info:
            filters:
              "tag:Name": infra_services_vpc
          register: infra_vpc

        - name: There must be exactly one matching vpc
          fail:
            msg: "Expected 1 vpc - actual: {{ infra_vpc.vpcs | length }}"
          when: infra_vpc.vpcs | length != 1
            
        - name: Record the vpc ID for later
          set_fact:
            vpc_id: "{{ infra_vpc.vpcs[0].vpc_id }}"

        - name: Report vpc information
          debug:
            msg: "{{ infra_vpc }}"


    - name: Create SSH Security Group
      block:
        - name: Create Security Group to allow SSH from the Internet {{ vpc_id }}
          amazon.aws.ec2_security_group:
            name: "infra_sg_ssh"
            description: "Allow SSH from Anywhere"
            vpc_id: "{{ vpc_id }}"
            rules:
              - proto: tcp
                ports:
                  - 22
                cidr_ip: 0.0.0.0/0
                rule_desc: Allow SSH from Anywhere
            tags:
              Name: infra_security_group_ssh
          register: infra_sg

        - name: Record Security Group ID
          set_fact:
            sg_id: "{{ infra_sg.group_id }}"

        - name: Report SSH Security Group
          debug:
            msg: "{{ infra_sg }}"

        - name: Get Instance Info
          block: 
            - name: Get info on any existing instances
              amazon.aws.ec2_instance_info:
                filters:
                  instance-state-name: running
                  'tag:coreos': true
              register: instances

            - name: Get the image_id(s) of any running instances
              set_fact:
                running_image_ids: "{{ instances.instances }}"
              when: (instances.instances | length) > 0
              

        #
        #
        #
        - name: Get the ID of the most recent CoreOS Image
          block:
            - name: Query the CoreOS image list
              amazon.aws.ec2_ami_info:
                owners:
                  - 125523088429
                filters:
                  architecture: x86_64
                  name: "fedora-coreos-*-x86_64"
                  description: "Fedora CoreOS stable * x86_64"
                  image-type: machine
              register: images

            - name: Sort and Pick the most recent image
              set_fact:
                image_id: "{{ (images.images | sort(attribute='name', reverse=true))[0].image_id }}"

            - name: Report the current image id
              debug:
                msg: "{{ image_id }}"

# Find any existing instances
#   Get the image ID

# Find the current image

# Create an instance
        
