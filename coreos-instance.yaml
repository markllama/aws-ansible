---
#
# An instance of an OS is only useful if you can log in and work.
# The first two things you need are an SSH public key and a Security Group
# that allows SSH access to the subnet where the instance resides
#
- name: 
  hosts:
    - localhost

  gather_facts: no
  connection: local

  tasks:

    - name: Get Subnet ID
      block: 
        - name: Get the Subnet ID
          amazon.aws.ec2_vpc_subnet_info:
            filters:
              "tag:Name": "infra_services_subnet"
          register: infra_subnets

        - name: Record the subnet ID for later
          set_fact:
            subnet_id: "{{ infra_subnets.subnets[0].id }}"

    - name: Get Security Group ID
      block: 
        - name: Get the Security Group ID
          amazon.aws.ec2_security_group_info:
            filters:
              "tag:Name": "infra_security_group_ssh"
          register: infra_security_groups

        - name: Record the security group ID for later
          set_fact:
            sg_id: "{{ infra_security_groups.security_groups[0].group_id }}"

    - name: Get Instance Info
      block: 
        - name: Get info on any existing instances
          amazon.aws.ec2_instance_info:
            filters:
              instance-state-name: running
              'tag:Name': "coreos-poc"
          register: instances

        - name: Get the image_id(s) of any running instances
          set_fact:
            image_id: "{{ instances.instances[0].image_id }}"
          when: (instances.instances | length) == 1

        #
        #
        #
        - name: Get the ID of the most recent CoreOS Image
          block: # Find any existing instances
            - name: Query the CoreOS image list
              amazon.aws.ec2_ami_info:
                owners:
                  - 125523088429
                filters:
                  architecture: x86_64
                  name: "fedora-coreos-*-x86_64"
                  description: "Fedora CoreOS stable * x86_64"
                  image-type: machine
              register: images

            - name: Sort and Pick the most recent image
              set_fact:
                image_id: "{{ (images.images | sort(attribute='name', reverse=true))[0].image_id }}"

          when: image_id is not defined

        - name: Report the selected image id
          debug:
            msg: "{{ image_id }}"

        - name: Create a Core OS Instance
          amazon.aws.ec2_instance:
            name: "coreos-poc"
            image_id: "{{ image_id }}"
            instance_type: t2.large
            vpc_subnet_id: "{{ subnet_id }}"
            security_group: "{{ sg_id }}"
            network:
              assign_public_ip: true
            key_name: ansible_user

          register: instance

        - name: Save the instance ID for later
          set_fact:
            instance_id: "{{ instance.instance_ids[0] }}"

        - name: Report the Instance Data
          debug:
            msg: "{{ instance.instances[0] }}"
            
